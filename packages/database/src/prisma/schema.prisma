// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "debian-openssl-1.1.x"]
  output        = "../src/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  USER
  ADMIN
}

model User {
  id              String   @id @default("")
  identityAddress String   @unique
  createdAt       DateTime @default(now())
  accountAddress  String?
  name            String?
  country         String?
  type            UserType @default(USER)
  referralCode    String   @unique
  referredBy      String?
  referredByUser  User?    @relation("Referrer", fields: [referredBy], references: [referralCode])

  events                     Event[]
  messages                   Message[]
  phoneNumber                UserPhoneNumber?
  completedQuestRequirements CompletedQuestRequirement[]
  savedProgress              SavedProgress?
  auditLogs                  Audit[]
  questProgress              QuestProgress[]
  referredUsers              User[]                      @relation("Referrer")
  transactions               TransactionIntent[]
  marketing                  Marketing[]
}

model RadMorphImage {
  id  String @id
  url String
}

model UserPhoneNumber {
  userId      String   @unique
  phoneNumber String   @id @unique
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Challenge {
  challenge String   @id
  createdAt DateTime @default(now())
}

model Event {
  transactionId String    @id
  id            String
  questId       String?
  userId        String?
  createdAt     DateTime  @default(now())
  processedAt   DateTime?
  error         String?

  user User? @relation(fields: [userId], references: [id])
}

model Message {
  id        Int       @id @default(autoincrement())
  userId    String
  createdAt DateTime  @default(now())
  seenAt    DateTime?
  data      Json

  user User @relation(fields: [userId], references: [id])
}

model Notification {
  notificationId String
  userId         String
  seenAt         DateTime?

  @@id([notificationId, userId])
}

model CompletedQuestRequirement {
  questId       String
  userId        String
  requirementId String
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@id([questId, userId, requirementId])
}

model QuestProgress {
  questId String
  userId  String
  status  QuestStatus @default(IN_PROGRESS)

  user User @relation(fields: [userId], references: [id])

  @@id([questId, userId])
}

model SavedProgress {
  userId   String @id
  questId  String
  progress Int
  user     User   @relation(fields: [userId], references: [id])
}

enum QuestStatus {
  IN_PROGRESS
  REWARDS_DEPOSITED
  REWARDS_CLAIMED
  COMPLETED
}

model Audit {
  transactionId String @id
  userId        String

  date        DateTime  @default(now())
  type        AuditType
  xrdUsdValue Decimal

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum AuditType {
  DIRECT_DEPOSIT
  CLAIMBOX_DEPOSIT
}

model TransactionIntent {
  discriminator String                  @id
  status        TransactionIntentStatus @default(WAITING)
  createdAt     DateTime                @default(now())
  error         String?
  userId        String
  data          Json?
  transactions  SubmittedTransaction[]

  user User @relation(fields: [userId], references: [id])
}

enum TransactionIntentStatus {
  WAITING
  PENDING
  ERROR
  COMPLETED
}

model SubmittedTransaction {
  transactionId     String   @id
  transactionIntent String
  status            String
  createdAt         DateTime @default(now())

  transaction TransactionIntent @relation(fields: [transactionIntent], references: [discriminator])
}

model Config {
  key   String @id
  value String
}

model Marketing {
  id           Int     @id @default(autoincrement())
  userId       String
  utm_campaign String?
  utm_medium   String?
  utm_source   String?
  utm_id       String?
  utm_content  String?
  utm_term     String?

  user User @relation(fields: [userId], references: [id])
}
